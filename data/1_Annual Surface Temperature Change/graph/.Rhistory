axis.text.y = element_text(size = 16))
plot1
# Area plot
plot2 <- ggplot(df, aes(x = date, y = value)) +
geom_area(aes(color = variable, fill = variable), alpha = 0.2, position = position_dodge(0.8)) +
theme(legend.title = element_text(size=18), legend.position = "top", legend.text = element_text(size = 16)) +
scale_color_manual(values = c("#00AFBB", "#E7B800")) +
scale_fill_manual(values = c("#00AFBB", "#E7B800")) +
#ggtitle(label = "Area chart for economics data") +
ylab("Value") +
xlab("Date") +
theme(panel.grid.major = element_line(size = 0.5, linetype = 'dashed', colour = "grey"),
panel.grid.minor =  element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(size = 20, face = "bold", hjust = 0.5),
axis.title.x = element_text(size = 18),
axis.text.x = element_text(size = 16),
axis.title.y = element_text(size = 18),
axis.text.y = element_text(size = 16))
plot2
View(data)
View(data)
# Colors
# http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf
# https://www.datanovia.com/en/blog/ggplot-colors-best-tricks-you-will-love/
# http://www.sthda.com/english/wiki/ggplot2-themes-and-background-colors-the-3-elements
# https://felixfan.github.io/ggplot2-remove-grid-background-margin/
# http://www.cookbook-r.com/Graphs/Bar_and_line_graphs_(ggplot2)/  (good)
# Legend tutorial
# https://www.datanovia.com/en/blog/ggplot-legend-title-position-and-labels/
# The aim of this plot is to see the weight of an aquatic plant that is grown under different pollution
# conditions (nano-particles of Titanium are used here)
# Function to clear console
cat("\014")
# Learn R version
getRversion()
# Clearing all plots
graphics.off()
# To empty an environment
rm(list = ls())
# Including ggplot2 library and gridExtra
library(ggplot2)
library(gridExtra)
# create a dataset
Titanium = c("0", "2", "4", "6", "8", "10")
Titanium
Fresh_Wt = c(2.49, 2.43, 2.04, 2.43, 2.49, 1.75)
Fresh_Wt
Labels = c("2.49a", "2.43a", "2.04ab", "2.43a", "2.49a", "1.75b")   # a, b, and ab are the relationships due to ANOVA
data = data.frame(Titanium, Fresh_Wt, Labels)
data
# We want to define the order of plotting
data$Titanium <- factor(data$Titanium , levels = c("0", "2", "4", "6", "8", "10"))
data
str(data)
cbp1 <- c("cadetblue3", "firebrick2", "darkseagreen3", "darkgoldenrod2", "darkorange2", "orchid4")
plot1 <- ggplot(data, aes(y = Fresh_Wt, x = Titanium, fill = Titanium)) +
geom_bar(position="dodge", stat="identity", colour="black", width=.7)  +
guides(fill=guide_legend(nrow = 1, byrow = TRUE)) +
scale_fill_manual(values = cbp1) +
geom_text(aes(label=Labels), size = 5, fontface = "bold", vjust = -0.2) +
ggtitle(label = "Fresh Weight", subtitle = "Plot of XXXX") +
ylab("Weight (g)") +
xlab("Titanium (mg/L)") +
labs(fill = "Titanium") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(size = 22, face = "bold", hjust = 0.5),
plot.subtitle = element_text(size = 18, hjust = 0.5),
legend.title = element_text(size = 18),
legend.text = element_text(size = 16),
legend.position = "top",
axis.title.x = element_text(size = 18),
axis.text.x = element_text(size = 16),
axis.title.y = element_text(size = 18),
axis.text.y = element_text(size = 16))
plot1
# This script shows how to use ggplot2 to create a group barchart
# Need stringi package
# Colors in R
# http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf
# Function to clear console
cat("\014")
# Learn R version
getRversion()
# Clearing all plots
graphics.off()
# To empty an environment
rm(list = ls())
# Including ggplot2 library
library(ggplot2)
# create a dataset (Male and Female popultion in CTIS)
Year <- c(rep("2016" , 2) , rep("2017" , 2), rep("2018" , 2) )
Year
Group <- rep(c("M" , "F") , 3)
Group
Population = c(200, 100, 250, 150, 280, 180)
Population
data = data.frame(Year, Group, Population)
data
# We want Male first and then Female in the plot
data$Group <- factor(data$Group , levels = c('F', 'M'))
str(data)
colors <- c("deeppink2", "steelblue2")
plot1 <- ggplot(data, aes(fill = Group, y = Population, x = Year)) +
geom_bar(position="dodge", stat="identity", colour="black", width = 0.8) +
theme(legend.position = "top") +
scale_fill_manual(values = colors) +
geom_text(aes(label=..Group..), position = position_dodge(0.8), vjust=-0.2) +
ggtitle(label = "CTIS Student Population Plot",
subtitle = "Annual Student Data Based on Gender") +
ylab("Population") +
labs(fill = "Gender") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(size = 20, face = "bold", hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
axis.title.x = element_text(size = 18),
axis.text.x = element_text(size = 16),
axis.title.y = element_text(size = 18),
axis.text.y = element_text(size = 16))
plot1
#ggsave("figure1.png", plot = plot1)
#dev.copy(png,'figure1.png')
#dev.off()
# Colors
# https://www.datanovia.com/en/blog/ggplot-colors-best-tricks-you-will-love/
# http://www.sthda.com/english/wiki/ggplot2-themes-and-background-colors-the-3-elements
# https://felixfan.github.io/ggplot2-remove-grid-background-margin/
# http://www.cookbook-r.com/Graphs/Bar_and_line_graphs_(ggplot2)/  (good)
# Legend tutorial
# https://www.datanovia.com/en/blog/ggplot-legend-title-position-and-labels/
# Lollipop chart tutorial
# https://www.r-graph-gallery.com/301-custom-lollipop-chart.html
# http://sape.inf.usi.ch/quick-reference/ggplot2/geom_segment
# The aim of this plot is to see the weight of an aquatic plant that is grown under different pollution
# conditions (nano-particles of Titanium are used here)
# Function to clear console
cat("\014")
# Learn R version
getRversion()
# Clearing all plots
graphics.off()
# To empty an environment
rm(list = ls())
# Including ggplot2 library and gridExtra
library(ggplot2)
library(gridExtra)
# create a dataset
Titanium = c("0", "2", "4", "6", "8", "10")
Titanium
Fresh_Wt = c(2.49, 2.43, 2.04, 2.43, 2.49, 1.75)
Fresh_Wt
Labels = c("2.49a", "2.43a", "2.04ab", "2.43a", "2.49a", "1.75b")   # a, b, and ab are the relationships due to ANOVA
data = data.frame(Titanium, Fresh_Wt, Labels)
data
# We want to define the order of plotting
data$Titanium <- factor(data$Titanium , levels = c("0", "2", "4", "6", "8", "10"))
str(data)
plot1 <- ggplot(data, aes(y = Fresh_Wt, x = Titanium)) +
geom_segment( aes(x = Titanium, xend = Titanium, y = 0, yend = Fresh_Wt), size = 2, color="skyblue") +
#geom_point(size = 5, color="orange", fill=alpha("orange", 0.3), alpha=0.7, shape=21, stroke=2) +
geom_point(size = 8, color="orange") +
theme(legend.title = element_text(size=18), legend.position = "top", legend.text = element_text(size = 16)) +
#coord_flip() +
geom_text(aes(label=Labels), size = 5, fontface = "bold", vjust = -1.0) +
ggtitle(label = "Fresh Weight") +
ylab("Weight (g)") +
xlab("Titanium (mg/L)") +
labs(fill = "Titanium") +
theme( panel.grid.major = element_blank(),     #panel.grid.major = element_line(size = 0.5, linetype = 'solid', colour = "blue"),
panel.grid.minor =  element_line(size = 0.5, linetype = 'dashed', colour = "grey"),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(size = 22, face = "bold", hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
axis.title.x = element_text(size = 18),
axis.text.x = element_text(size = 16),
axis.title.y = element_text(size = 18),
axis.text.y = element_text(size = 16))
plot1
# This script shows how to use ggplot2 to create stacked barchart and percent stacked barchart
# Colors in R
# http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf
# Barcharts in R
# https://r-graphics.org/chapter-bar-graph
# dplyr tutorial
# http://rpubs.com/coleeagland/dplyrtutorialforjohnandjenn
# Function to clear console
cat("\014")
# Learn R version
getRversion()
# Clearing all plots
graphics.off()
# To empty an environment
rm(list = ls())
# Including ggplot2 library
library(ggplot2)
Year <- c(rep(c("2006-07", "2007-08", "2008-09", "2009-10"), each = 4))
Category <- c(rep(c("A", "B", "C", "D"), times = 4))
Frequency <- c(168, 259, 226, 340, 216, 431, 319, 368, 423, 645, 234, 685, 166, 467, 274, 251)
data <- data.frame(Year, Category, Frequency)
data$Year <- factor(data$Year , levels = c("2006-07", "2007-08", "2008-09", "2009-10"))
data
colors <- c("slateblue2", "palevioletred1", "springgreen3", "yellow3")
plot1 <- ggplot(data, aes(x = Year, y = Frequency,  fill = Category)) +
geom_bar(stat="identity", colour="black", width = 0.8) +
theme(legend.title = element_text(size=18), legend.position = "top", legend.text = element_text(size = 16)) +
scale_fill_manual(values = colors) +
geom_text(aes(label=Frequency), stat="identity", size = 5, hjust = 0.5, position = position_stack(vjust = 0.5)) +
ggtitle(label = "Stacked Bar Chart",
subtitle = "Year vs Frequency") +
ylab("Frequency") +
labs(fill = "Category") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(size = 20, face = "bold", hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
axis.title.x = element_text(size = 18),
axis.text.x = element_text(size = 16),
axis.title.y = element_text(size = 18),
axis.text.y = element_text(size = 16))
plot1
###################################################################################################
# Percent stacked barchart (We will compute the percentages using dplyr package)
###################################################################################################
library(dplyr)
# The group_by() function tells dplyr that future operations should operate on the data frame as though it
# were split up into groups, on the Year column. The mutate() function tells it to calculate a new column,
# dividing each row's Frequency value by the sum of the Frequency column within each group.
df <- data %>%
dplyr::group_by(Year) %>%
dplyr::mutate(Percent_frequecy = round( Frequency/sum(Frequency) * 100 , digits = 1))
df
plot2 <- ggplot(df, aes(x = Year, y = Percent_frequecy, fill = Category)) +
geom_bar(stat="identity", colour="black", width = 0.8) +
#theme(legend.title = element_text(size=18), legend.position = "top", legend.text = element_text(size = 16)) +
scale_fill_manual(values = colors) +
geom_text(aes(label = paste0(Percent_frequecy, "%", sep = "")), size = 5, hjust = 0.5, position = position_stack(vjust = 0.5)) +
ggtitle(label = "Percent Stacked Bar Chart",
subtitle = "Year vs Percentage") +
ylab("Percentage") +
labs(fill = "Category") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(size = 20, face = "bold", hjust = 0.5),
plot.subtitle = element_text(size = 16, hjust = 0.5),
legend.title = element_text(size=18),
legend.text = element_text(size = 16),
legend.position = "top",
axis.title.x = element_text(size = 18),
axis.text.x = element_text(angle = 90, hjust = 1, size = 16),
axis.title.y = element_text(size = 18),
axis.text.y = element_text(size = 16))
plot2
round(1 - pnorm(-1.59) , digits = 3)
round( 5.5/sqrt(12), digits = 2)
# This script shows how to use ggplot2
# Need stringi package
# Function to clear console
cat("\014")
# Learn R version
getRversion()
# Clearing all plots
graphics.off()
# To empty an environment
rm(list = ls())
# Including ggplot2 library
library(ggplot2)
# Motor Trend Car Road Tests (mtcars). This data is from the 1974 Motor Trend US
# magazine, and comprises fuel consumption and 10 aspects of automobile design
# and performance for 32 automobiles (1973--74 models).
mtcars     # This dataframe is part of R
str(mtcars)
# 1. Data layer
# The code will not show anything
ggplot(data = mtcars)
# 2. Aesthetic layer
# The code will define the data to be used to plot a graph/chart
# Again nothing will be plotted yet
ggplot(data = mtcars, aes(x = mpg, y = wt))   # x and y refers to data from the "data" parameter
# 3. Geometrics layer
# Now we will get a plot
ggplot(data = mtcars, aes(x = mpg, y = wt)) +
geom_point()      # scatterplot or scatter plot
# Another plot
# Now we will get a plot
ggplot(data = mtcars, aes(x = mpg, y = wt)) +
geom_point( aes(col = factor(cyl)) )    # using aesthetic to color the data points
# Please also check other available geom_
# 4. Facets layer
# y ~ x in R means that the left hand is the dependent variable, the right
# hand is the independent variable
# Facets (here gears 3, 4 and 5 will be used for the grid)
ggplot(data = mtcars, aes(x = mpg, y = wt)) +
geom_point() +
facet_grid(gear ~ .)   # # facets equal to the levels of variable distributed vertically
# Another plot
ggplot(data=mtcars, aes(x = mpg, y = wt)) +
geom_point() +
facet_grid(. ~ gear)   # facets equal to the levels of variable distributed horizontally
# Another plot
ggplot(data = mtcars, aes(x = mpg, y = wt)) +
geom_point() +
facet_wrap( ~ gear, ncol = 2)  # the point plot on gears in two columns format
# Another plot
# The following outcome shows that the weight and mileage are plotted against
# the cylinder and number of gears
ggplot(data = mtcars, aes(x = mpg, y = wt)) +
geom_point() +
facet_grid(gear ~ cyl)   # plots every combination of gear and cyl (gear y-axis and cyl on x-axis)
# 5. Statistics layer
# The below code is using stat_smooth to help the eye in seeing patterns in the
# presence of overplotting by putting a shadow under the plot
ggplot(data = mtcars, aes(x = mpg, y = wt)) +
geom_point() +
facet_grid(gear ~ .) +
stat_smooth()
# 6. Coordinates layer
# It is often used to apply limit on x-axis or y-axis to play
# with x vs y ratio and hence customize the visual as needed
ggplot(data = mtcars, aes(x = mpg, y = wt)) +
geom_point() +
facet_grid(gear ~ .) +
stat_smooth() +
coord_cartesian(xlim = c(13, 30))   # polar coordinates and spherical projection also exist
# 7. Theme layer
# Themes allows us to enrich our data presentation with appropriate use of
# labels, positions, fonts, colors, etc.
ggplot(data = mtcars, aes(x = mpg, y = wt)) +
geom_point() +
facet_grid(gear ~ .) +
stat_smooth() +
coord_cartesian(xlim = c(13, 30)) +
theme_linedraw()
# Function to clear console
cat("\014")
# Learn R version
getRversion()
# Clearing all plots
graphics.off()
# To empty an environment
rm(list = ls())
# Including ggplot2 library
library(ggplot2)
# Motor Trend Car Road Tests (mtcars). This data is from the 1974 Motor Trend US
# magazine, and comprises fuel consumption and 10 aspects of automobile design
# and performance for 32 automobiles (1973--74 models).
mtcars     # This dataframe is part of R
str(mtcars)
# 1. Data layer
# The code will not show anything
ggplot(data = mtcars)
# 2. Aesthetic layer
# The code will define the data to be used to plot a graph/chart
# Again nothing will be plotted yet
ggplot(data = mtcars, aes(x = mpg, y = wt))   # x and y refers to data from the "data" parameter
# 3. Geometrics layer
# Now we will get a plot
ggplot(data = mtcars, aes(x = mpg, y = wt)) +
geom_point()      # scatterplot or scatter plot
# Another plot
# Now we will get a plot
ggplot(data = mtcars, aes(x = mpg, y = wt)) +
geom_point( aes(col = factor(cyl)) )    # using aesthetic to color the data points
# 4. Facets layer
# y ~ x in R means that the left hand is the dependent variable, the right
# hand is the independent variable
# Facets (here gears 3, 4 and 5 will be used for the grid)
ggplot(data = mtcars, aes(x = mpg, y = wt)) +
geom_point() +
facet_grid(gear ~ .)   # # facets equal to the levels of variable distributed vertically
# Another plot
ggplot(data=mtcars, aes(x = mpg, y = wt)) +
geom_point() +
facet_grid(. ~ gear)   # facets equal to the levels of variable distributed horizontally
# Another plot
ggplot(data = mtcars, aes(x = mpg, y = wt)) +
geom_point() +
facet_wrap( ~ gear, ncol = 2)  # the point plot on gears in two columns format
# Another plot
# The following outcome shows that the weight and mileage are plotted against
# the cylinder and number of gears
ggplot(data = mtcars, aes(x = mpg, y = wt)) +
geom_point() +
facet_grid(gear ~ cyl)   # plots every combination of gear and cyl (gear y-axis and cyl on x-axis)
# 5. Statistics layer
# The below code is using stat_smooth to help the eye in seeing patterns in the
# presence of overplotting by putting a shadow under the plot
ggplot(data = mtcars, aes(x = mpg, y = wt)) +
geom_point() +
facet_grid(gear ~ .) +
stat_smooth()
# 6. Coordinates layer
# It is often used to apply limit on x-axis or y-axis to play
# with x vs y ratio and hence customize the visual as needed
ggplot(data = mtcars, aes(x = mpg, y = wt)) +
geom_point() +
facet_grid(gear ~ .) +
stat_smooth() +
coord_cartesian(xlim = c(13, 30))   # polar coordinates and spherical projection also exist
# 7. Theme layer
# Themes allows us to enrich our data presentation with appropriate use of
# labels, positions, fonts, colors, etc.
ggplot(data = mtcars, aes(x = mpg, y = wt)) +
geom_point() +
facet_grid(gear ~ .) +
stat_smooth() +
coord_cartesian(xlim = c(13, 30)) +
theme_linedraw()
# This script shows how to use ggplot2 to create a group barchart
# Need stringi package
# Colors in R
# http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf
# Function to clear console
cat("\014")
# Learn R version
getRversion()
# Clearing all plots
graphics.off()
# To empty an environment
rm(list = ls())
# Including ggplot2 library
library(ggplot2)
# create a dataset (Male and Female popultion in CTIS)
Year <- c(rep("2016" , 2) , rep("2017" , 2), rep("2018" , 2) )
Year
Group <- rep(c("M" , "F") , 3)
Group
Population = c(200, 100, 250, 150, 280, 180)
Population
data = data.frame(Year, Group, Population)
data
# We want Male first and then Female in the plot
data$Group <- factor(data$Group , levels = c('F', 'M'))
str(data)
colors <- c("deeppink2", "steelblue2")
plot1 <- ggplot(data, aes(fill = Group, y = Population, x = Year)) +
geom_bar(position="dodge", stat="identity", colour="black", width = 0.8) +
theme(legend.position = "top") +
scale_fill_manual(values = colors) +
geom_text(aes(label=..Group..), position = position_dodge(0.8), vjust=-0.2) +
ggtitle(label = "CTIS Student Population Plot",
subtitle = "Annual Student Data Based on Gender") +
ylab("Population") +
labs(fill = "Gender") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(size = 20, face = "bold", hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
axis.title.x = element_text(size = 18),
axis.text.x = element_text(size = 16),
axis.title.y = element_text(size = 18),
axis.text.y = element_text(size = 16))
plot1
#ggsave("figure1.png", plot = plot1)
#dev.copy(png,'figure1.png')
#dev.off()
# Colors
# http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf
# https://www.datanovia.com/en/blog/ggplot-colors-best-tricks-you-will-love/
# http://www.sthda.com/english/wiki/ggplot2-themes-and-background-colors-the-3-elements
# https://felixfan.github.io/ggplot2-remove-grid-background-margin/
# http://www.cookbook-r.com/Graphs/Bar_and_line_graphs_(ggplot2)/  (good)
# Legend tutorial
# https://www.datanovia.com/en/blog/ggplot-legend-title-position-and-labels/
# The aim of this plot is to see the weight of an aquatic plant that is grown under different pollution
# conditions (nano-particles of Titanium are used here)
# Function to clear console
cat("\014")
# Learn R version
getRversion()
# Clearing all plots
graphics.off()
# To empty an environment
rm(list = ls())
# Including ggplot2 library and gridExtra
library(ggplot2)
library(gridExtra)
# create a dataset
Titanium = c("0", "2", "4", "6", "8", "10")
Titanium
Fresh_Wt = c(2.49, 2.43, 2.04, 2.43, 2.49, 1.75)
Fresh_Wt
Labels = c("2.49a", "2.43a", "2.04ab", "2.43a", "2.49a", "1.75b")   # a, b, and ab are the relationships due to ANOVA
data = data.frame(Titanium, Fresh_Wt, Labels)
data
# We want to define the order of plotting
data$Titanium <- factor(data$Titanium , levels = c("0", "2", "4", "6", "8", "10"))
data
str(data)
cbp1 <- c("cadetblue3", "firebrick2", "darkseagreen3", "darkgoldenrod2", "darkorange2", "orchid4")
plot1 <- ggplot(data, aes(y = Fresh_Wt, x = Titanium, fill = Titanium)) +
geom_bar(position="dodge", stat="identity", colour="black", width=.7)  +
guides(fill=guide_legend(nrow = 1, byrow = TRUE)) +
scale_fill_manual(values = cbp1) +
geom_text(aes(label=Labels), size = 5, fontface = "bold", vjust = -0.2) +
ggtitle(label = "Fresh Weight", subtitle = "Plot of XXXX") +
ylab("Weight (g)") +
xlab("Titanium (mg/L)") +
labs(fill = "Titanium") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(size = 22, face = "bold", hjust = 0.5),
plot.subtitle = element_text(size = 18, hjust = 0.5),
legend.title = element_text(size = 18),
legend.text = element_text(size = 16),
legend.position = "top",
axis.title.x = element_text(size = 18),
axis.text.x = element_text(size = 16),
axis.title.y = element_text(size = 18),
axis.text.y = element_text(size = 16))
plot1
